/*
 * Copyright (C) 2013-2014 Olaf Lessenich
 * Copyright (C) 2014-2015 University of Passau, Germany
 *
 * This library is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Lesser General Public
 * License as published by the Free Software Foundation; either
 * version 2.1 of the License, or (at your option) any later version.
 *
 * This library is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with this library; if not, write to the Free Software
 * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston,
 * MA 02110-1301  USA
 *
 * Contributors:
 *     Olaf Lessenich <lessenic@fim.uni-passau.de>
 *     Georg Seibt <seibt@fim.uni-passau.de>
 */

plugins {
    id 'application'
    id 'eclipse'
    id 'idea'
}

tasks.withType(JavaCompile) {
    options.encoding = 'UTF-8'
}

sourceSets {
    main {
        java {
            srcDir 'src'
        }
        resources {
            srcDir 'res'
        }
    }
    test {
        java {
            srcDir 'test'
        }
        resources {
            srcDir 'testres'
        }
    }
}

repositories {
    mavenCentral()
}

dependencies {
    compile 'commons-io:commons-io:2.6'
    compile 'commons-cli:commons-cli:1.4'
    compile 'org.apache.commons:commons-math3:3.6.1'
    compile 'commons-codec:commons-codec:1.11'
    compile 'com.thoughtworks.xstream:xstream:1.4.10'
    compile 'com.google.code.gson:gson:2.8.2'
    compile 'de.uni-passau.fim.seibt:kvconfig:1.0'
    compile project(':JNativeMerge')
    compile files('lib/extendj.jar')
    testCompile 'junit:junit:4.12'
}

idea {
    module {
        downloadJavadoc = true
        downloadSources = true
    }
}

def loggingConfigFile = file('JDimeLogging.properties')
def configFile = file('JDime.properties')

def defaultOpts = ["-Xmx2048m", "-ea"]

startScripts {
    applicationName = rootProject.name
    mainClassName = "de.fosd.jdime.Main"
    defaultJvmOpts = defaultOpts
}

task guiScripts(type: CreateStartScripts) {
    applicationName = "${rootProject.name}_GUI"
    mainClassName = 'de.fosd.jdime.gui.GUI'
    outputDir = startScripts.outputDir
    classpath = startScripts.classpath
}

installDist {
    if (project.hasProperty('distDir')) {
        destinationDir = file(project.property('distDir'))
    }
}

run {
    main = 'de.fosd.jdime.gui.GUI'
}

test {
    systemProperty "java.util.logging.config.file", loggingConfigFile.getAbsolutePath()
    maxHeapSize = '2048m'
    enableAssertions = true
}

compileJava {
    options.compilerArgs << "-Xlint:all"
}

def version = '1.0'

task buildJar(type: Jar) {
    manifest {
        attributes 'Implementation-Version': version,
                'Main-Class': 'de.fosd.jdime.Main'
    }
    baseName = 'automerge'
    from { configurations.compile.collect { it.isDirectory() ? it : zipTree(it) } }
    with jar
}